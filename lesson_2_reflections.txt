What happens when you initialize a repository? Why do you need to do it?

Initializing a repository creates all the necessary files and file structures
that allow you to use git functions such as log, diff and checkout. Without doing
this you just have a normal directory.
---------------------------------------------------------

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is an abstract location containing all files in the working
directory that are also in the repository, or are intended to become part of
the repository after the next commit. The staging area allows the user full
control over what files become part of the repository.
---------------------------------------------------------

How can you use the staging area to make sure you have one commit per logical change?

By adding all of the files that have been changed as part of the logical changes
to the staging area before committing, as opposed to committing one file at a time.
---------------------------------------------------------

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

When a programmer wants to start working on a new feature, creating a branch
allows work on this new feature to be kept separate from the working code, which
may be available to the public.
When there are multiple programmers working on a project, each working on a
different feature, each programmer could have their own branch, which could then
be merged when complete.
---------------------------------------------------------

How do the diagrams help you visualize the branch structure?

Diagrams provide a visual representation of which branches make up the branch
structure, and where they connect (i.e. where a branch began and if/where it
merges).
---------------------------------------------------------
